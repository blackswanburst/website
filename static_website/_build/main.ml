(* Generated by Mirage (Sat, 7 May 2016 17:07:55 GMT). *)

open Lwt

let _ = Printexc.record_backtrace true

module Console = Console_unix

let console1 () =
  Console.connect "0"

module M3 = Dispatch.Main(Console)

let t3 = console1

let static1 () =
  Static1.connect ()

module M2 = Dispatch.Main(Console)(Static1)

let t2 () =
  console1 () >>= function
  | `Error e -> fail (Failure "console1")
  | `Ok console1 ->
  static1 () >>= function
  | `Error e -> fail (Failure "static1")
  | `Ok static1 ->
  return (`Ok (console1, static1))

module Stackv41 = Tcpip_stack_socket.Make(Console)

let stackv41 () =
  console1 () >>= function
  | `Error _    -> fail (Failure "console1")
  | `Ok console ->
  let config = {
    V1_LWT.name = "stackv41";
    console; interface = [Ipaddr.V4.of_string_exn "0.0.0.0"];
    mode = ();
  } in
  Udpv4_socket.connect None >>= function
  | `Error _ -> fail (Failure "Udpv4_socket")
  | `Ok udpv4 ->
  Tcpv4_socket.connect None >>= function
  | `Error _ -> fail (Failure "Tcpv4_socket")
  | `Ok tcpv4 ->
  Stackv41.connect config udpv4 tcpv4

module Conduit1 = Conduit_mirage

let conduit1 () = Lwt.return Conduit_mirage.empty
let conduit1 () =
  conduit1 () >>= fun t ->
  stackv41 () >>= function
  | `Error e -> fail (Failure "stack")
  | `Ok s    ->
    let tcp = Conduit_mirage.stackv4 (module Stackv41) in
    Conduit_mirage.with_tcp t tcp s
let conduit1 () =
  conduit1 () >>= fun t ->
  Conduit_mirage.with_tls t
let conduit1 () = conduit1 () >>= fun t -> Lwt.return (`Ok t)

module Http1 = Cohttp_mirage.Server(Conduit1.Flow)

let http1 () =
  conduit1 () >>= function
  | `Error _ -> assert false
  | `Ok t ->
    let listen s f =
      Conduit1.listen t s (Http1.listen f)
    in
    return (`Ok listen)

module M1 = Dispatch.Main(Console)(Static1)(Http1)

let t1 () =
  console1 () >>= function
  | `Error e -> fail (Failure "console1")
  | `Ok console1 ->
  http1 () >>= function
  | `Error e -> fail (Failure "http1")
  | `Ok http1 ->
  static1 () >>= function
  | `Error e -> fail (Failure "static1")
  | `Ok static1 ->
  M1.start console1 static1 http1

let () =
  OS.Main.run (Nocrypto_entropy_lwt.initialize () >>= fun () -> join [t1 ()])
