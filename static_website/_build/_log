### Starting build.
# Target: main.ml.depends, tags: { annot, bin_annot, extension:ml, file:main.ml, ocaml, ocamldep, package(conduit.mirage), package(cstruct), package(io-page), package(io-page.unix), package(lwt), package(lwt.syntax), package(magic-mime), package(mirage-console.unix), package(mirage-http), package(mirage-types), package(mirage-types.lwt), package(nocrypto.lwt), package(re.str), package(tcpip.stack-socket), package(tls), principal, quiet, strict_sequence, syntax(camlp4o) }
ocamlfind ocamldep -package tls -package tcpip.stack-socket -package re.str -package nocrypto.lwt -package mirage-types.lwt -package mirage-types -package mirage-http -package mirage-console.unix -package magic-mime -package lwt -package io-page.unix -package io-page -package cstruct -package conduit.mirage -package lwt.syntax -syntax camlp4o -modules main.ml > main.ml.depends
# Target: dispatch.ml.depends, tags: { annot, bin_annot, extension:ml, file:dispatch.ml, ocaml, ocamldep, package(conduit.mirage), package(cstruct), package(io-page), package(io-page.unix), package(lwt), package(lwt.syntax), package(magic-mime), package(mirage-console.unix), package(mirage-http), package(mirage-types), package(mirage-types.lwt), package(nocrypto.lwt), package(re.str), package(tcpip.stack-socket), package(tls), principal, quiet, strict_sequence, syntax(camlp4o) }
ocamlfind ocamldep -package tls -package tcpip.stack-socket -package re.str -package nocrypto.lwt -package mirage-types.lwt -package mirage-types -package mirage-http -package mirage-console.unix -package magic-mime -package lwt -package io-page.unix -package io-page -package cstruct -package conduit.mirage -package lwt.syntax -syntax camlp4o -modules dispatch.ml > dispatch.ml.depends
# Target: static1.mli.depends, tags: { annot, bin_annot, extension:mli, file:static1.mli, ocaml, ocamldep, package(conduit.mirage), package(cstruct), package(io-page), package(io-page.unix), package(lwt), package(lwt.syntax), package(magic-mime), package(mirage-console.unix), package(mirage-http), package(mirage-types), package(mirage-types.lwt), package(nocrypto.lwt), package(re.str), package(tcpip.stack-socket), package(tls), principal, quiet, strict_sequence, syntax(camlp4o) }
ocamlfind ocamldep -package tls -package tcpip.stack-socket -package re.str -package nocrypto.lwt -package mirage-types.lwt -package mirage-types -package mirage-http -package mirage-console.unix -package magic-mime -package lwt -package io-page.unix -package io-page -package cstruct -package conduit.mirage -package lwt.syntax -syntax camlp4o -modules static1.mli > static1.mli.depends
# Target: dispatch.cmo, tags: { annot, bin_annot, byte, compile, extension:cmo, extension:ml, file:dispatch.cmo, file:dispatch.ml, implem, ocaml, package(conduit.mirage), package(cstruct), package(io-page), package(io-page.unix), package(lwt), package(lwt.syntax), package(magic-mime), package(mirage-console.unix), package(mirage-http), package(mirage-types), package(mirage-types.lwt), package(nocrypto.lwt), package(re.str), package(tcpip.stack-socket), package(tls), principal, quiet, strict_sequence, syntax(camlp4o) }
ocamlfind ocamlc -c -g -annot -bin-annot -principal -strict-sequence -package tls -package tcpip.stack-socket -package re.str -package nocrypto.lwt -package mirage-types.lwt -package mirage-types -package mirage-http -package mirage-console.unix -package magic-mime -package lwt -package io-page.unix -package io-page -package cstruct -package conduit.mirage -package lwt.syntax -syntax camlp4o -o dispatch.cmo dispatch.ml
# Target: static1.cmi, tags: { annot, bin_annot, byte, compile, extension:mli, file:static1.mli, interf, ocaml, package(conduit.mirage), package(cstruct), package(io-page), package(io-page.unix), package(lwt), package(lwt.syntax), package(magic-mime), package(mirage-console.unix), package(mirage-http), package(mirage-types), package(mirage-types.lwt), package(nocrypto.lwt), package(re.str), package(tcpip.stack-socket), package(tls), principal, quiet, strict_sequence, syntax(camlp4o) }
ocamlfind ocamlc -c -g -annot -bin-annot -principal -strict-sequence -package tls -package tcpip.stack-socket -package re.str -package nocrypto.lwt -package mirage-types.lwt -package mirage-types -package mirage-http -package mirage-console.unix -package magic-mime -package lwt -package io-page.unix -package io-page -package cstruct -package conduit.mirage -package lwt.syntax -syntax camlp4o -o static1.cmi static1.mli
# Target: main.cmo, tags: { annot, bin_annot, byte, compile, extension:cmo, extension:ml, file:main.cmo, file:main.ml, implem, ocaml, package(conduit.mirage), package(cstruct), package(io-page), package(io-page.unix), package(lwt), package(lwt.syntax), package(magic-mime), package(mirage-console.unix), package(mirage-http), package(mirage-types), package(mirage-types.lwt), package(nocrypto.lwt), package(re.str), package(tcpip.stack-socket), package(tls), principal, quiet, strict_sequence, syntax(camlp4o) }
ocamlfind ocamlc -c -g -annot -bin-annot -principal -strict-sequence -package tls -package tcpip.stack-socket -package re.str -package nocrypto.lwt -package mirage-types.lwt -package mirage-types -package mirage-http -package mirage-console.unix -package magic-mime -package lwt -package io-page.unix -package io-page -package cstruct -package conduit.mirage -package lwt.syntax -syntax camlp4o -o main.cmo main.ml
# Target: static1.ml.depends, tags: { annot, bin_annot, extension:ml, file:static1.ml, ocaml, ocamldep, package(conduit.mirage), package(cstruct), package(io-page), package(io-page.unix), package(lwt), package(lwt.syntax), package(magic-mime), package(mirage-console.unix), package(mirage-http), package(mirage-types), package(mirage-types.lwt), package(nocrypto.lwt), package(re.str), package(tcpip.stack-socket), package(tls), principal, quiet, strict_sequence, syntax(camlp4o) }
ocamlfind ocamldep -package tls -package tcpip.stack-socket -package re.str -package nocrypto.lwt -package mirage-types.lwt -package mirage-types -package mirage-http -package mirage-console.unix -package magic-mime -package lwt -package io-page.unix -package io-page -package cstruct -package conduit.mirage -package lwt.syntax -syntax camlp4o -modules static1.ml > static1.ml.depends
# Target: dispatch.cmx, tags: { annot, bin_annot, compile, extension:cmx, extension:ml, file:dispatch.cmx, file:dispatch.ml, implem, native, ocaml, package(conduit.mirage), package(cstruct), package(io-page), package(io-page.unix), package(lwt), package(lwt.syntax), package(magic-mime), package(mirage-console.unix), package(mirage-http), package(mirage-types), package(mirage-types.lwt), package(nocrypto.lwt), package(re.str), package(tcpip.stack-socket), package(tls), principal, quiet, strict_sequence, syntax(camlp4o) }
ocamlfind ocamlopt -c -g -annot -bin-annot -principal -strict-sequence -package tls -package tcpip.stack-socket -package re.str -package nocrypto.lwt -package mirage-types.lwt -package mirage-types -package mirage-http -package mirage-console.unix -package magic-mime -package lwt -package io-page.unix -package io-page -package cstruct -package conduit.mirage -package lwt.syntax -syntax camlp4o -o dispatch.cmx dispatch.ml
# Target: static1.cmx, tags: { annot, bin_annot, compile, extension:cmx, extension:ml, file:static1.cmx, file:static1.ml, implem, native, ocaml, package(conduit.mirage), package(cstruct), package(io-page), package(io-page.unix), package(lwt), package(lwt.syntax), package(magic-mime), package(mirage-console.unix), package(mirage-http), package(mirage-types), package(mirage-types.lwt), package(nocrypto.lwt), package(re.str), package(tcpip.stack-socket), package(tls), principal, quiet, strict_sequence, syntax(camlp4o) }
ocamlfind ocamlopt -c -g -annot -bin-annot -principal -strict-sequence -package tls -package tcpip.stack-socket -package re.str -package nocrypto.lwt -package mirage-types.lwt -package mirage-types -package mirage-http -package mirage-console.unix -package magic-mime -package lwt -package io-page.unix -package io-page -package cstruct -package conduit.mirage -package lwt.syntax -syntax camlp4o -o static1.cmx static1.ml
# Target: main.cmx, tags: { annot, bin_annot, compile, extension:cmx, extension:ml, file:main.cmx, file:main.ml, implem, native, ocaml, package(conduit.mirage), package(cstruct), package(io-page), package(io-page.unix), package(lwt), package(lwt.syntax), package(magic-mime), package(mirage-console.unix), package(mirage-http), package(mirage-types), package(mirage-types.lwt), package(nocrypto.lwt), package(re.str), package(tcpip.stack-socket), package(tls), principal, quiet, strict_sequence, syntax(camlp4o) }
ocamlfind ocamlopt -c -g -annot -bin-annot -principal -strict-sequence -package tls -package tcpip.stack-socket -package re.str -package nocrypto.lwt -package mirage-types.lwt -package mirage-types -package mirage-http -package mirage-console.unix -package magic-mime -package lwt -package io-page.unix -package io-page -package cstruct -package conduit.mirage -package lwt.syntax -syntax camlp4o -o main.cmx main.ml
# Target: main.native, tags: { annot, bin_annot, dont_link_with, extension:native, file:main.native, link, native, ocaml, package(conduit.mirage), package(cstruct), package(io-page), package(io-page.unix), package(lwt), package(lwt.syntax), package(magic-mime), package(mirage-console.unix), package(mirage-http), package(mirage-types), package(mirage-types.lwt), package(nocrypto.lwt), package(re.str), package(tcpip.stack-socket), package(tls), principal, program, quiet, strict_sequence, syntax(camlp4o) }
ocamlfind ocamlopt -g -linkpkg -linkpkg -package tls -package tcpip.stack-socket -package re.str -package nocrypto.lwt -package mirage-types.lwt -package mirage-types -package mirage-http -package mirage-console.unix -package magic-mime -package lwt -package io-page.unix -package io-page -package cstruct -package conduit.mirage -package lwt.syntax -syntax camlp4o dispatch.cmx static1.cmx main.cmx -o main.native
# Compilation successful.
